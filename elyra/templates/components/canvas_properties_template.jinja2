{
  "type": "object",
  "properties": {
    "label": {
      "type": "string",
      "title": "Label",
      "description": "A custom label for the node."
    },
    "component_parameters": {
      "type": "object",
      "properties": {
        {% if component.input_properties|length > 0 %}
        "inputs_header": {
          "type": "null",
          "title": "Inputs",
          "description": "Input properties for this component.",
          "uihints": {
            "ui:field": "header"
          }
        },
        {% for property in component.input_properties %}
        "{{ property.ref }}": {{ render_parameter_details(property) }},
        {% endfor %}
        {% endif %}
        {% if component.output_properties|length > 0 %}
        "outputs_header": {
          "type": "null",
          "title": "Outputs",
          "description": "Outputs produced by this component.",
          "uihints": {
            "ui:field": "header"
          }
        },
        {% for property in component.output_properties %}
        "{{ property.ref }}": {{ render_parameter_details(property) }},
        {% endfor %}
        {% endif %}
        {% if additional_properties_apply %}
        "additional_properties_header": {
          "type": "null",
          "title": "Additional Properties",
          "description": "Additional properties used by Elyra that are not given in the component definition.",
          "uihints": {
            "ui:field": "header"
          }
        }
        {% endif %}
        {% if "mounted_volumes" not in elyra_property_collisions_list %}
        ,
        "mounted_volumes": {
          "title": "Data Volumes",
          "description": "Volumes to be mounted in this node. The specified Persistent Volume Claims must exist in the Kubernetes namespace where the node is executed or this node will not run.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "default": [],
          "uihints": {
            "items": {
              "ui:placeholder": "/mount/path=pvc-name"
            },
          "keyValueEntries": true
          }
        }
        {% endif %}
        {% if "kubernetes_pod_annotations" not in elyra_property_collisions_list %}
        ,
        "kubernetes_pod_annotations": {
          "title": "Kubernetes Pod Annotations",
          "description": "Metadata to be added to this node. The metadata is exposed as annotation in the Kubernetes pod that executes this node.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "default": [],
          "uihints": {
            "items": {
              "ui:placeholder": "annotation_key=annotation_value"
            },
          "keyValueEntries": true
          }
        }
        {% endif %}
        {% if "kubernetes_tolerations" not in elyra_property_collisions_list %}
        ,
        "kubernetes_tolerations": {
          "title": "Kubernetes Tolerations",
          "description": "Kubernetes tolerations to attach to the pod where the node is executed.",
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          },
          "default": [],
          "uihints": {
            "items": {
              "ui:placeholder": "TOL_ID=key:operator:value:effect"
            },
          "keyValueEntries": true
          }
        }
        {% endif %}
        {% if "disallow_cached_output" not in elyra_property_collisions_list %}
        ,
        "disallow_cached_output" : {
          "type": "boolean",
          "title": "Disallow cached output",
          "description": "Disable caching to force node re-execution in the target runtime environment."
        }
        {% endif %}
      },
      "required": [
      {% for property in component.required_properties %}
        "{{ property.ref }}"
          {% if loop.index != loop|length %}
          ,
          {% endif %}
      {% endfor %}
      ]
    },
    "component_source_header": {
      "type": "null",
      "title": "Component Source",
      "uihints": {
        "ui:field": "header"
      }
    },
    "component_source": {
      "type": "string",
      "title": "Component Source",
      "default": {{ component.component_source|tojson|safe }},
      "uihints": {
        "ui:readonly": true
      }
    }
  },
  "required": ["component_parameters"]
}
