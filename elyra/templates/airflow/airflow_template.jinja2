from airflow import DAG
from airflow.utils.dates import days_ago


args = {
    'project_id' : '{{ pipeline_name }}',
}

dag = DAG(
    '{{ pipeline_name }}',
    default_args=args,
    schedule_interval='@once',
    start_date=days_ago(1),
    description="""
{{ pipeline_description|replace("\"\"\"", "\\\"\\\"\\\"") }}
    """,
    is_paused_upon_creation={{ is_paused_upon_creation }},
)

{% if secrets %}
from airflow.kubernetes.secret import Secret
## Ensure all secrets are defined in the Kubernetes namespace where this pipeline will be run
{% for var_name, secret in secrets.items() %}
{{ var_name|regex_replace }} = Secret(
    deploy_type='env',
    deploy_target="{{ secret.env_var }}",
    secret="{{ secret.name }}",
    key="{{ secret.key }}",
)
{% endfor %}
{% endif %}

{% if volumes %}
from airflow.contrib.kubernetes.volume import Volume
from airflow.contrib.kubernetes.volume_mount import VolumeMount
{% for var_name, volume in volumes.items() %}
mount_{{ var_name|regex_replace }} = VolumeMount(
    name='{{ volume.pvc_name }}',
    mount_path='{{ volume.path }}',
    sub_path=None,
    read_only=False
)
config_{{ var_name|regex_replace }} = {
    'persistentVolumeClaim': {
        'claimName': '{{ volume.pvc_name }}'
    }
}
{{ var_name|regex_replace }} = Volume(name='{{ volume.pvc_name }}', configs=config_{{ var_name|regex_replace }})
{% endfor %}
{% endif %}

{% for key, operation in operations_list.items() %}
{% if not operation.is_generic_operator %}
{% for import_statement in operation.imports %}
{{import_statement}}
{% endfor %}
{% else %}
from airflow.contrib.operators.kubernetes_pod_operator import KubernetesPodOperator
{% endif %}

{% if operation.operator_source %}# Operator source: {{ operation.operator_source }}{% endif %}{% if not operation.is_generic_operator %}
op_{{ operation.id|regex_replace }} = {{ operation.class_name }}(
                                                           task_id='{{ operation.notebook|regex_replace }}',
        {% for param, value in operation.component_params.items() %}
                                                           {{ param }}={{ value }},
        {% endfor %}
    {% else %}
op_{{ operation.id|regex_replace }} = KubernetesPodOperator(name='{{ operation.notebook|regex_replace }}',
                                                            namespace='{{ user_namespace }}',
                                                            image='{{ operation.runtime_image }}',
        {% if operation.runtime_image_pull_secret %}
                                                            image_pull_secrets='{{ operation.runtime_image_pull_secret }}',
        {% endif %}
                                                            cmds=['sh', '-c'],
                                                            arguments=["{{ operation.argument_list }}"],
                                                            task_id='{{ operation.notebook|regex_replace }}',
                                                            env_vars={{ operation.pipeline_envs }},
        {% if operation.cpu_request or operation.mem_request or operation.gpu_limit %}
                                                            resources = {
            {% if operation.cpu_request %}
                                                                       'request_cpu': '{{ operation.cpu_request }}',
            {% endif %}
            {% if operation.mem_request %}
                                                                       'request_memory': '{{ operation.mem_request }}',
            {% endif %}
            {% if operation.gpu_limit %}
                                                                       'limit_gpu': '{{ operation.gpu_limit }}',
            {% endif %}
        },

        {% endif %}
                                                          secrets={{ operation.kubernetes_secrets }},
                                                          in_cluster={{ in_cluster }},
                                                          config_file="{{ kube_config_path }}",
    {% endif %}
    {% if operation.volumes %}
                                                          volumes={{ operation.volumes }},
                                                          volume_mounts={{ operation.volume_mounts }},
    {% endif %}
                                                          dag=dag)
    {% if operation.image_pull_policy %}
        op_{{ operation.id|regex_replace }}.image_pull_policy = '{{ operation.image_pull_policy }}'
    {% endif %}

    {% if operation.doc %}
        op_{{ operation.id|regex_replace }}.doc = """
        {{ operation.doc|replace("\"\"\"", "\\\"\\\"\\\"") }}
    """
    {% endif %}

    {% if operation.parent_operation_ids %}
        {% for parent_operation_id in operation.parent_operation_ids %}
            op_{{ operation.id|regex_replace }} << op_{{ parent_operation_id|regex_replace }}
        {% endfor %}
    {% endif %}
{% endfor %}
