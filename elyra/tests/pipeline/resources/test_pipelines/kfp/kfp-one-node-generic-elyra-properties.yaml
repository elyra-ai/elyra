apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: kfp-one-node-generic-elyra-properties-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.13, pipelines.kubeflow.org/pipeline_compilation_time: '2022-11-18T15:59:21.640199',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Test pipeline for generic
      nodes and Elyra properties", "name": "kfp-one-node-generic-elyra-properties"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.13}
spec:
  entrypoint: kfp-one-node-generic-elyra-properties
  templates:
  - name: kfp-one-node-generic-elyra-properties
    dag:
      tasks:
      - {name: run-a-file, template: run-a-file}
  - name: run-a-file
    container:
      args: ['mkdir -p ./jupyter-work-dir && cd ./jupyter-work-dir && echo ''Downloading
          https://raw.githubusercontent.com/elyra-ai/elyra/main/elyra/kfp/bootstrapper.py''
          && curl --fail -H ''Cache-Control: no-cache'' -L https://raw.githubusercontent.com/elyra-ai/elyra/main/elyra/kfp/bootstrapper.py
          --output bootstrapper.py && echo ''Downloading https://raw.githubusercontent.com/elyra-ai/elyra/main/etc/generic/requirements-elyra.txt''
          && curl --fail -H ''Cache-Control: no-cache'' -L https://raw.githubusercontent.com/elyra-ai/elyra/main/etc/generic/requirements-elyra.txt
          --output requirements-elyra.txt && echo ''Downloading https://raw.githubusercontent.com/elyra-ai/elyra/main/etc/generic/requirements-elyra-py37.txt''
          && curl --fail -H ''Cache-Control: no-cache'' -L https://raw.githubusercontent.com/elyra-ai/elyra/main/etc/generic/requirements-elyra-py37.txt
          --output requirements-elyra-py37.txt && python3 -m pip install  packaging
          && python3 -m pip freeze > requirements-current.txt && python3 bootstrapper.py
          --pipeline-name ''kfp-one-node-generic-elyra-properties'' --cos-endpoint
          ''http://examples.com:31671'' --cos-bucket ''test'' --cos-directory ''kfp-one-node-generic-elyra-properties-1118155921''
          --cos-dependencies-archive ''a-notebook-84d22396-568f-4c06-8558-95f715bba023.tar.gz''
          --file ''a-notebook.ipynb'' ']
      command: [sh, -c]
      env:
      - {name: ELYRA_RUNTIME_ENV, value: kfp}
      - {name: AWS_ACCESS_KEY_ID, value: my_name}
      - {name: AWS_SECRET_ACCESS_KEY, value: my_password}
      - name: ELYRA_ENABLE_PIPELINE_INFO
        value: "True"
      - {name: ELYRA_WRITABLE_CONTAINER_DIR, value: /tmp}
      - {name: ELYRA_RUN_NAME, value: '{{workflow.uid}}'}
      - name: secret_env_var_1
        valueFrom:
          secretKeyRef: {key: secret-key-1, name: secret-1}
      image: tensorflow/tensorflow:2.8.0
      imagePullPolicy: IfNotPresent
      volumeMounts:
      - {mountPath: /test/vol1, name: test-pvc-1, readOnly: false}
      - {mountPath: /test/vol2, name: test-pvc-2, readOnly: false, subPath: sub/path}
      - {mountPath: /test/vol3, name: test-pvc-3, readOnly: true, subPath: sub/path}
      - {mountPath: /dev/shm, name: shm}
    outputs:
      artifacts:
      - {name: mlpipeline-metrics, path: /tmp/mlpipeline-metrics.json}
      - {name: mlpipeline-ui-metadata, path: /tmp/mlpipeline-ui-metadata.json}
    tolerations:
    - {effect: NoExecute, key: kt1, operator: Equal, value: '3'}
    - {effect: NoSchedule, key: kt2, operator: Exists}
    - {operator: Exists}
    - {key: kt3, operator: Equal, value: v3}
    metadata:
      annotations: {anno-key-1: anno-value-1, anno-key-without-value-2: '', elyra/node-file-name: a-notebook.ipynb,
        elyra/pipeline-source: kfp-one-node-generic-elyra-properties.pipeline, pipelines.kubeflow.org/task_display_name: a-notebook,
        pipelines.kubeflow.org/component_spec: '{"description": "Run a Jupyter notebook
          or Python/R script", "implementation": {"container": {"args": ["mkdir -p
          ./jupyter-work-dir && cd ./jupyter-work-dir && echo ''Downloading https://raw.githubusercontent.com/elyra-ai/elyra/main/elyra/kfp/bootstrapper.py''
          && curl --fail -H ''Cache-Control: no-cache'' -L https://raw.githubusercontent.com/elyra-ai/elyra/main/elyra/kfp/bootstrapper.py
          --output bootstrapper.py && echo ''Downloading https://raw.githubusercontent.com/elyra-ai/elyra/main/etc/generic/requirements-elyra.txt''
          && curl --fail -H ''Cache-Control: no-cache'' -L https://raw.githubusercontent.com/elyra-ai/elyra/main/etc/generic/requirements-elyra.txt
          --output requirements-elyra.txt && echo ''Downloading https://raw.githubusercontent.com/elyra-ai/elyra/main/etc/generic/requirements-elyra-py37.txt''
          && curl --fail -H ''Cache-Control: no-cache'' -L https://raw.githubusercontent.com/elyra-ai/elyra/main/etc/generic/requirements-elyra-py37.txt
          --output requirements-elyra-py37.txt && python3 -m pip install  packaging
          && python3 -m pip freeze > requirements-current.txt && python3 bootstrapper.py
          --pipeline-name ''kfp-one-node-generic-elyra-properties'' --cos-endpoint
          ''http://examples.com:31671'' --cos-bucket ''test'' --cos-directory ''kfp-one-node-generic-elyra-properties-1118155921''
          --cos-dependencies-archive ''a-notebook-84d22396-568f-4c06-8558-95f715bba023.tar.gz''
          --file ''a-notebook.ipynb'' "], "command": ["sh", "-c"], "image": "tensorflow/tensorflow:2.8.0"}},
          "name": "Run a file"}', pipelines.kubeflow.org/component_ref: '{"digest":
          "97042d8cfce3a5251d9c170ee1404773d2479fdc2cde6b5788ea425cd483d17e"}'}
      labels:
        label-key-without-value-1: ''
        label-key-2: label-value-2
        elyra/node-type: notebook-script
        elyra/pipeline-name: kfp-one-node-generic-elyra-properties
        elyra/pipeline-version: kfp-one-node-generic-elyra-properties-0815
        elyra/experiment-name: kfp-one-node-generic-elyra-properties-0815
        elyra/node-name: a-notebook
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.13
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
    volumes:
    - emptyDir: {medium: Memory, sizeLimit: 0.5G}
      name: shm
    - name: test-pvc-1
      persistentVolumeClaim: {claimName: test-pvc-1}
    - name: test-pvc-2
      persistentVolumeClaim: {claimName: test-pvc-2}
    - name: test-pvc-3
      persistentVolumeClaim: {claimName: test-pvc-3}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
