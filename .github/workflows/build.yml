#
# Copyright 2018-2023 Elyra Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: Elyra Tests
on:
  push: # all branches
  pull_request: # all branches
  schedule:
    # once a day at 3 am (PST) (10 am (UTC))
    - cron:  '0 10 * * *'

env:
  FORCE_COLOR: true

jobs:
  prepare-yarn-cache:
    name: Prepare Cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "*"
      - uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install
        run: yarn install --frozen-lockfile && tsc -v

  lint-server:
    name: Lint Server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Lint
        run: make lint-server

  lint-ui:
    name: Lint UI
    needs: prepare-yarn-cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "*"
      - uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install
        run: make yarn-install
      - name: Lint
        run: make eslint-check-ui
      - name: Check format
        run: make prettier-check-ui

  test-server:
    name: Test Server
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install
        # Note: Tests fail if we don't install `wheel` for some reason.
        run: |
          make install-server
          make test-dependencies
      - name: Version Snapshot
        run: pip freeze
      - name: Test
        id: Test
        run: make pytest
      - name: Fetch packages metadata (if Test step failed)
        # Note: checking for general failure() first is needed according to docs
        if: ${{ failure() && steps.Test.conclusion == 'failure' }}
        env:
          days: 7 # check for newer package versions in past X days
        run: |
          python3 ./.github/workflows/scripts/fetch_packages_metadata.py $days

  test-ui:
    name: Test UI
    needs: prepare-yarn-cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "*"
      - uses: actions/setup-python@v4
        with:
          python-version: "*"
      - uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Build
        run: |
          make build-dependencies
          make yarn-install
          make build-ui
      - name: Install
        run: make install-server
      - name: Test
        run: make test-ui-unit

  test-integration:
    name: Run Integration Tests
    needs: prepare-yarn-cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "*"
      - uses: actions/setup-python@v4
        with:
          python-version: "*"
      - uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Build
        run: |
          make build-dependencies
          make yarn-install
          make build-ui
      - name: Install
        run: |
          make install-server
          make install-examples
      - name: Cypress
        run: make test-integration
      - name: Collect logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          path: |
            ${{ github.workspace }}/build/cypress-tests/*.log
            ${{ github.workspace }}/build/cypress-tests/screenshots//**/*
            ${{ github.workspace }}/build/cypress-tests/videos//**/*
            /home/runner/.npm/_logs/*.log

  test-documentation-build:
    name: Test documentation build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: make docs

  validate-image-env:
    name: Validate Image Environment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3
      - name: Validate image environment
        run: make PYTHON_VERSION=${{ matrix.python-version }} elyra-image-env


  validate-images:
    name: Validate Images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Validate runtime images
        run: make REMOVE_RUNTIME_IMAGE=1 validate-runtime-images
